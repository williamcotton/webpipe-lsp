# Test App

GET /hello/:world
  |> jq: `{ world: .params.world }`
  |> handlebars: `<p>hello, {{world}}</p>`

describe "hello, world"
  it "calls the route"
    when calling GET /hello/world
    then status is 200
    and output equals `<p>hello, world</p>`

GET /lua/:id/example
  |> lua: `
    local id = request.params.id
    local name = request.query.name
    return {
      message = "Hello from Lua!",
      id = id,
      name = name
    }
  `
describe "lua"
  it "calls the route"
    when calling GET /lua/123/example?name=example
    then status is 200
    and output equals `{
      "message": "Hello from Lua!",
      "id": 123,
      "name": "example"
    }`

## Config
config pg {
  host: $WP_PG_HOST || "localhost"
  port: $WP_PG_PORT || "5432"
  database: $WP_PG_DATABASE || "express-test"
  user: $WP_PG_USER || "postgres"
  password: $WP_PG_PASSWORD || "postgres"
  ssl: false
  initialPoolSize: 10
  maxPoolSize: 20
}

config auth {
  sessionTtl: 604800
  cookieName: "wp_session"
  cookieSecure: false
  cookieHttpOnly: true
  cookieSameSite: "Lax"
  cookiePath: "/"
}

## Tests

GET /test-lua-env
  |> lua: `
    local env = getEnv("WP_PG_USER")
    return {
      env = env
    }
  `

pipeline getTeams =
  |> jq: `{ sqlParams: [.params.id] }`
  |> pg: `SELECT * FROM teams WHERE id = $1`

GET /hello
  |> jq: `{ hello: "world" }`

GET /page/:id
  |> pipeline: getTeams
  |> jq: `{ team: .data.rows[0] }`

pg teamsQuery = `SELECT * FROM teams`

GET /teams
  |> jq: `{ sqlParams: [] }`
  |> pg: teamsQuery

# Testing standalone variables
describe "teamsQuery variable"
  with mock pg.teamsQuery returning `{
    "rows": [
      { "id": "1", "name": "Platform", "member_count": 8 },
      { "id": "2", "name": "Growth", "member_count": 12 },
      { "id": "3", "name": "Security", "member_count": 5 }
    ]
  }`

  it "returns all teams"
    when executing variable pg teamsQuery
    with input `{ "sqlParams": [] }`
    then output equals `{
      "rows": [
        { "id": "1", "name": "Platform", "member_count": 8 },
        { "id": "2", "name": "Growth", "member_count": 12 },
        { "id": "3", "name": "Security", "member_count": 5 }
      ]
    }`

# Testing a pipeline directly
describe "getTeams pipeline"
  with mock pg returning `{
    "rows": [{ "id": "2", "name": "Growth", "created_at": "2024-01-20" }]
  }`

  it "transforms params and queries database"
    when executing pipeline getTeams
    with input `{ "params": { "id": "2" } }`
    then output equals `{
      "rows": [{ "id": "2", "name": "Growth", "created_at": "2024-01-20" }]
    }`

  it "handles string id parameter"
    when executing pipeline getTeams
    with input `{ "params": { "id": 42 } }`
    and mock pg returning `{ "rows": [{ "id": 42, "name": "Marketing" }] }`
    then output equals `{
      "rows": [{ "id": 42, "name": "Marketing" }]
    }`

  it "supports jq equals on output subpath"
    when executing pipeline getTeams
    with input `{ "params": { "id": 42 } }`
    and mock pg returning `{ "rows": [{ "id": 42, "name": "Marketing" }] }`
    then output `.rows[0].id` equals 42

describe "test calling route"
  it "calls the route"
    when calling GET /hello
    then status is 200
    and output equals `{
      "hello": "world"
    }`

describe "jq assertions"
  it "supports output contains for partial JSON"
    when calling GET /hello
    then output contains `{ "hello": "world" }`

  it "supports output matches for HTML"
    when calling GET /hello/world
    then output matches `^<p>hello, .*</p>$`

  it "supports status ranges"
    when calling GET /hello
    then status in 200..299

  it "supports jq filter with map"
    when executing pipeline getTeams
    with input `{ "params": { "id": 2 } }`
    and mock pg returning `{ "rows": [{ "id": 2, "name": "Growth" }, { "id": 3, "name": "Security" }] }`
    then output `.rows | map(.id)` equals `[2, 3]`

GET /test
  |> jq: `.`

GET /test2
  |> lua: `return request`

GET /test3
  |> jq: `{message: "Hello World", status: "success"}`
  |> result
    ok(200):
      |> jq: `{
        success: true,
        data: .message,
        timestamp: now
      }`
    default(500):
      |> jq: `{
        error: "Something went wrong",
        timestamp: now
      }`

GET /test4
  |> jq: `{
    errors: [
      {
        type: "validationError",
        field: "email",
        message: "Email is required",
        code: "FIELD_REQUIRED"
      }
    ]
  }`
  |> result
    ok(200):
      |> jq: `{success: true}`
    validationError(400):
      |> jq: `{
        error: "Validation failed",
        field: .errors[0].field,
        message: .errors[0].message,
        code: .errors[0].code
      }`
    default(500):
      |> jq: `{error: "Internal server error"}`

GET /test5
  |> jq: `{
    errors: [
      {
        type: "authRequired",
        header: "Authorization",
        expected: "Bearer <token>",
        provided: null
      }
    ]
  }`
  |> result
    ok(200):
      |> jq: `{success: true, data: .result}`
    authRequired(401):
      |> jq: `{
        error: "Authentication required",
        header: .errors[0].header,
        expected: .errors[0].expected,
        provided: .errors[0].provided
      }`
    default(500):
      |> jq: `{error: "Internal server error"}`

GET /test6
  |> jq: `{
    errors: [
      {
        type: "unknownError",
        message: "This is a custom error type not handled explicitly"
      }
    ]
  }`
  |> result
    ok(200):
      |> jq: `{success: true}`
    validationError(400):
      |> jq: `{error: "Validation error"}`
    default(500):
      |> jq: `{
        error: "Unhandled error occurred",
        type: .errors[0].type,
        message: .errors[0].message
      }`

GET /test7
  |> lua: `
    -- Test executeSql function in Lua
    local result, err = executeSql("SELECT * FROM teams LIMIT 5")
    
    if err then
      return {
        error = "Database error: " .. err,
        sql = "SELECT * FROM teams LIMIT 5"
      }
    end
    
    return {
      message = "Lua executeSql test successful",
      sql = "SELECT * FROM teams LIMIT 5",
      data = result,
      luaVersion = _VERSION
    }
  `


GET /test-sql-error
  |> jq: `{ sqlParams: [] }`
  |> pg: `SELECT * FROM nonexistent_table`
  |> result
    ok(200):
      |> jq: `{success: true, data: .data}`
    sqlError(500):
      |> jq: `{
        error: "Database error",
        sqlstate: .errors[0].sqlstate,
        message: .errors[0].message,
        query: .errors[0].query
      }`
    default(500):
      |> jq: `{error: "Internal server error"}`

POST /users
  |> jq: `{
    method: .method,
    name: .body.name,
    email: .body.email,
    action: "create"
  }`

PUT /users/:id
  |> jq: `{
    method: .method,
    id: (.params.id | tonumber),
    name: .body.name,
    email: .body.email,
    action: "update"
  }`

PATCH /users/:id
  |> jq: `{
    method: .method,
    id: (.params.id | tonumber),
    body: .body,
    action: "partial_update"
  }`

POST /test-body
  |> jq: `{
    method: .method,
    body: .body,
    hasBody: (.body != null)
  }`

PUT /test-body
  |> jq: `{
    method: .method,
    body: .body,
    hasBody: (.body != null)
  }`

PATCH /test-body
  |> jq: `{
    method: .method,
    body: .body,
    hasBody: (.body != null)
  }`

GET /hello-handlebars
  |> jq: `{ name: "World", message: "Hello from handlebars!" }`
  |> handlebars: `
    <html>
      <head>
        <title>{{message}}</title>
      </head>
      <body>
        <h1>{{message}}</h1>
        <p>Hello, {{name}}!</p>
      </body>
    </html>
  `

GET /handlebars-error-test
  |> jq: `{ invalid: "data" }`
  |> handlebars: `{{syntax_error`

handlebars cardPartial = `
  <div class="card">
    <h3>{{title}}</h3>
    <p>{{description}}</p>
  </div>
`

handlebars headerPartial = `
  <header>
    <h1>{{siteName}}</h1>
    <nav>{{>navPartial}}</nav>
  </header>
`

handlebars navPartial = `
  <ul>
    <li><a href="/">Home</a></li>
    <li><a href="/about">About</a></li>
  </ul>
`

GET /test-partials
  |> jq: `{ 
    title: "Welcome", 
    description: "This is a test card",
    siteName: "My Website"
  }`
  |> handlebars: `
    <html>
      <head>
        <title>{{siteName}}</title>
      </head>
      <body>
        {{>headerPartial}}
        <main>
          {{>cardPartial}}
        </main>
      </body>
    </html>
  `

GET /test-missing-partial
  |> jq: `{ title: "Test" }`
  |> handlebars: `
    <html>
      <body>
        {{>nonexistentPartial}}
      </body>
    </html>
  `

GET /test-sql-error-handlebars
  |> jq: `{ sqlParams: [] }`
  |> pg: `SELECT * FROM nonexistent_table`
  |> result
    ok(200):
      |> jq: `{success: true, data: .data}`
    sqlError(500):
      |> jq: `{
        error: "Database error",
        sqlstate: .errors[0].sqlstate,
        message: .errors[0].message,
        query: .errors[0].query
      }`
      |> handlebars: `{{error}}`
    default(500):
      |> jq: `{error: "Internal server error"}`
      |> handlebars: `{{error}}`

GET /cookies
  |> jq: `{
    message: "Cookie test response",
    cookies: .cookies,
    setCookies: [
      "sessionId=abc123; HttpOnly; Secure; Max-Age=3600",
      "userId=john; Max-Age=86400",
      "theme=dark; Path=/"
    ]
  }`

GET /auth/status
  |> auth: "optional"
  |> jq: `{
    authenticated: (.user != null),
    user: .user,
    message: if .user then "User is authenticated" else "User is not authenticated" end
  }`

GET /debug/users
  |> jq: `{ sqlParams: [] }`
  |> pg: `SELECT id, login, email, type, status, created_at FROM users LIMIT 5`
  |> jq: `{
    message: "Users in database",
    users: .data.rows,
    count: (.data.rows | length)
  }`

GET /debug/test-user
  |> jq: `{ sqlParams: ["admin"] }`
  |> pg: `SELECT id, login, password_hash, email, type, status FROM users WHERE login = $1 AND status = 'active'`
  |> jq: `{
    message: "Test user lookup for 'admin'",
    found: (.data.rows | length > 0),
    user: if (.data.rows | length > 0) then .data.rows[0] else null end
  }`

GET /debug/users-schema
  |> jq: `{ sqlParams: [] }`
  |> pg: `SELECT column_name, data_type, is_nullable, column_default FROM information_schema.columns WHERE table_name = 'users' ORDER BY ordinal_position`
  |> jq: `{
    message: "Users table schema",
    columns: .data.rows
  }`

POST /debug/test-hash
  |> auth: "register"
  |> jq: `{
    message: "Test hash generation (this will fail but show us what's happening)",
    body: .body,
    errors: .errors
  }`

config cache {
  enabled: true
  defaultTtl: 60
  maxCacheSize: 10485760
}

GET /cache-test
  |> cache: `
    ttl: 10
    enabled: true
  `
  |> jq: `{
    message: "Hello from cache test!",
    timestamp: now,
    random: (now % 1000)
  }`

GET /no-cache-test  
  |> jq: `{
    message: "No cache here",
    timestamp: now,
    random: (now % 1000)
  }`

GET /slow-cached-test
  |> cache: `
    ttl: 30
    enabled: true
  `
  |> jq: `{ sqlParams: [] }`
  |> pg: `SELECT pg_sleep(0.25), 'Slow database operation completed!' as message, now() as timestamp`
  |> jq: `{
    message: .data.rows[0].message,
    timestamp: .data.rows[0].timestamp,
    cached: true,
    note: "This query sleeps for 250ms - should be fast on cache hit!"
  }`

GET /slow-uncached-test
  |> jq: `{ sqlParams: [] }`
  |> pg: `SELECT pg_sleep(0.25), 'Slow database operation completed!' as message, now() as timestamp`
  |> jq: `{
    message: .data.rows[0].message,
    timestamp: .data.rows[0].timestamp,
    cached: false,
    note: "This query sleeps for 250ms - always slow!"
  }`

GET /very-slow-cached-test
  |> cache: `
    ttl: 60
    enabled: true
  `
  |> jq: `{ sqlParams: [] }`
  |> pg: `SELECT pg_sleep(1.0), 'Very slow database operation completed!' as message, now() as timestamp, random() as random_value`
  |> jq: `{
    message: .data.rows[0].message,
    timestamp: .data.rows[0].timestamp,
    random_value: .data.rows[0].random_value,
    cached: true,
    note: "This query sleeps for 1 second - cache makes a huge difference!"
  }`

GET /user/:id/profile
  |> cache: `
    keyTemplate: user-profile-{params.id}
    ttl: 30
    enabled: true
  `
  |> jq: `{ sqlParams: [.params.id] }`
  |> pg: `SELECT pg_sleep(0.5), $1 as user_id, 'User profile data' as profile_type, now() as fetched_at`
  |> jq: `{
    user_id: .data.rows[0].user_id,
    profile_type: .data.rows[0].profile_type,
    fetched_at: .data.rows[0].fetched_at,
    cache_key_used: "user-profile-" + (.originalRequest.params.id | tostring),
    note: "Cache key includes user ID from URL parameter"
  }`

GET /api/search
  |> log: `level: debug, includeBody: true, includeHeaders: true`
  |> cache: `
    keyTemplate: search-{query.q}-{query.category}
    ttl: 15
    enabled: true
  `
  |> jq: `{ 
    sqlParams: [.query.q // "default", .query.category // "all"],
    search_term: .query.q,
    search_category: .query.category
  }`
  |> pg: `SELECT pg_sleep(0.3), $1 as term, $2 as category, 'Search results' as result_type, now() as searched_at`
  |> jq: `{
    search_term: .data.rows[0].term,
    category: .data.rows[0].category,
    result_type: .data.rows[0].result_type,
    searched_at: .data.rows[0].searched_at,
    cache_key_used: "search-" + (.originalRequest.query.q | tostring) + "-" + (.originalRequest.query.category | tostring),
    note: "Cache key varies by search term and category query parameters"
  }`

config log {
  enabled: true
  format: "json"
  level: "debug"
  includeBody: false
  includeHeaders: true
  maxBodySize: 1024
  timestamp: true
}

  
GET /api/users/:id
  |> log: `level: debug, includeBody: true, includeHeaders: true`
  |> pg: `SELECT * FROM users WHERE id = $1`

## Todos App

# Default partials to avoid missing-partial errors and enable overrides
handlebars title = `Default Title`
handlebars headExtras = ``
handlebars content = `Default content`
handlebars footerScripts = ``
handlebars pageTitle = `Page Title`
handlebars pageContent = ``
handlebars authHeader = ``

handlebars baseLayout = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{> title}}</title>
  <script src="https://unpkg.com/htmx.org@1.9.10"></script>
  <script src="https://cdn.tailwindcss.com"></script>
  {{> headExtras}}
</head>
<body class="bg-gray-100 font-sans">
  {{> content}}
  {{> footerScripts}}
</body>
</html>
`

handlebars authLayout = `
{{#*inline "authHeader"}}
  <div class="flex justify-between items-center border-b-2 border-blue-500 pb-3 mb-6">
    <h1 class="text-3xl font-bold text-gray-800">{{> pageTitle}}</h1>
    <div class="flex items-center space-x-4">
      <span class="text-gray-600">Welcome, {{user.login}}!</span>
      <button hx-post="/logout" hx-swap="none" hx-on::after-request="window.location.href='/login-page'" class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors">Logout</button>
    </div>
  </div>
{{/inline}}
{{#*inline "content"}}
  <div class="max-w-4xl mx-auto p-6">
    <div class="bg-white p-6 rounded-lg shadow-md">
      {{> authHeader}}
      {{> pageContent}}
    </div>
  </div>
{{/inline}}
{{> baseLayout}}
`
POST /login
  |> validate: `{
    login: string(3..50),
    password: string(6..100)
  }`
  |> auth: "login"
  |> result
    ok(200):
      |> jq: `{
        success: true,
        message: "Login successful",
        user: {
          id: .user.id | tostring,
          login: .user.login,
          email: .user.email,
          type: .user.type
        }
      }`
    validationError(400):
      |> jq: `{
        success: false,
        error: "Validation failed",
        field: .errors[0].context,
        message: .errors[0].message
      }`
      |> handlebars: `
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
          <strong class="font-bold">Validation Error:</strong>
          <span class="block sm:inline">{{message}}</span>
        </div>
      `
    authError(401):
      |> jq: `{
        success: false,
        error: "Login failed",
        message: .errors[0].message,
        context: .errors[0].context,
        fullError: .errors[0]
      }`
      |> handlebars: `
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
          <strong class="font-bold">Login Failed:</strong>
          <span class="block sm:inline">{{message}}</span>
          {{#context}}<br><small>Context: {{context}}</small>{{/context}}
        </div>
      `

POST /logout
  |> auth: "logout"
  |> result
    ok(200):
      |> jq: `{
        success: true,
        message: "Logged out successfully"
      }`
    authError(401):
      |> jq: `{
        success: false,
        error: "Logout failed",
        message: .errors[0].message
      }`

POST /register
  |> validate: `{
    login: string(3..50),
    email: email,
    password: string(8..100)
  }`
  |> auth: "register"
  |> result
    ok(201):
      |> jq: `{
        success: true,
        message: "Registration successful"
      }`
      |> handlebars: `
        <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4" role="alert">
          <strong class="font-bold">Success!</strong>
          <span class="block sm:inline">Account created successfully. Redirecting to login...</span>
        </div>
      `
    validationError(400):
      |> jq: `{
        success: false,
        error: "Validation failed",
        field: .errors[0].context,
        message: .errors[0].message
      }`
      |> handlebars: `
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
          <strong class="font-bold">Validation Error:</strong>
          <span class="block sm:inline">{{message}}</span>
        </div>
      `
    authError(409):
      |> jq: `{
        success: false,
        error: "Registration failed",
        message: .errors[0].message
      }`
      |> handlebars: `
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
          <strong class="font-bold">Registration Failed:</strong>
          <span class="block sm:inline">{{message}}</span>
        </div>
      `

GET /login-page
  |> jq: `{
    pageTitle: "Login - Todo App",
    message: "Please log in to access your todos"
  }`
  |> handlebars: `
  {{#*inline "content"}}
    <body class="bg-gray-100 font-sans">
      <div class="max-w-md mx-auto mt-20 p-6">
        <div class="bg-white p-8 rounded-lg shadow-md">
          <div class="text-center mb-8">
            <h1 class="text-3xl font-bold text-gray-800 mb-2">Welcome Back</h1>
            <p class="text-gray-600">{{message}}</p>
          </div>
          
          <div id="login-response" class="mb-4"></div>
          
          <form hx-post="/login" hx-target="#login-response" hx-swap="innerHTML" class="space-y-4">
            <div>
              <label for="login" class="block text-sm font-medium text-gray-700 mb-1">Username</label>
              <input type="text" id="login" name="login" required class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="Enter your username">
            </div>
            <div>
              <label for="password" class="block text-sm font-medium text-gray-700 mb-1">Password</label>
              <input type="password" id="password" name="password" required class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="Enter your password">
            </div>
            <button type="submit" class="w-full bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors">
              Sign In
            </button>
          </form>
          
          <div class="mt-6 text-center">
            <p class="text-sm text-gray-600">
              Don't have an account? 
              <a href="/register-page" class="text-blue-500 hover:text-blue-600 font-medium">Sign up</a>
            </p>
          </div>
          
          <div class="mt-4 text-center">
            <a href="/hello" class="text-sm text-gray-500 hover:text-gray-700">← Back to Home</a>
          </div>
        </div>
      </div>
      
      <script>
        // Redirect to todos on successful login
        document.body.addEventListener('htmx:afterRequest', function(event) {
          if (event.detail.xhr.status === 200 && event.detail.target.id === 'login-response') {
            try {
              const response = JSON.parse(event.detail.xhr.responseText);
              if (response.success) {
                window.location.href = '/todos';
              }
            } catch (e) {
              // If not JSON, might be an error message
            }
          }
        });
      </script>
    <!-- content -->
  {{/inline}}
  {{> baseLayout}}
  `

GET /register-page
  |> jq: `{
    pageTitle: "Register - Todo App",
    message: "Create your account to get started"
  }`
  |> handlebars: `
  {{#*inline "content"}}
      <div class="max-w-md mx-auto mt-20 p-6">
        <div class="bg-white p-8 rounded-lg shadow-md">
          <div class="text-center mb-8">
            <h1 class="text-3xl font-bold text-gray-800 mb-2">Create Account</h1>
            <p class="text-gray-600">{{message}}</p>
          </div>
          
          <div id="register-response" class="mb-4"></div>
          
          <form hx-post="/register" hx-target="#register-response" hx-swap="innerHTML" class="space-y-4">
            <div>
              <label for="login" class="block text-sm font-medium text-gray-700 mb-1">Username</label>
              <input type="text" id="login" name="login" required class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="Choose a username (3-50 chars)">
            </div>
            <div>
              <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email</label>
              <input type="email" id="email" name="email" required class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="Enter your email">
            </div>
            <div>
              <label for="password" class="block text-sm font-medium text-gray-700 mb-1">Password</label>
              <input type="password" id="password" name="password" required class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="Choose a password (8+ chars)">
            </div>
            <button type="submit" class="w-full bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors">
              Create Account
            </button>
          </form>
          
          <div class="mt-6 text-center">
            <p class="text-sm text-gray-600">
              Already have an account? 
              <a href="/login-page" class="text-blue-500 hover:text-blue-600 font-medium">Sign in</a>
            </p>
          </div>
          
          <div class="mt-4 text-center">
            <a href="/hello" class="text-sm text-gray-500 hover:text-gray-700">← Back to Home</a>
          </div>
        </div>
      </div>
      
      <script>
        // Redirect to login on successful registration
        document.body.addEventListener('htmx:afterRequest', function(event) {
          if (event.detail.xhr.status === 200 && event.detail.target.id === 'register-response') {
            try {
              const response = JSON.parse(event.detail.xhr.responseText);
              if (response.success) {
                window.location.href = '/login-page';
              }
            } catch (e) {
              // If not JSON, might be an error message
            }
          }
        });
      </script>
  {{/inline}}
  {{> baseLayout}}
  `

handlebars loginRequiredLayout = `
{{#*inline "title"}}Login Required{{/inline}}
{{#*inline "content"}}
    <div class="max-w-md mx-auto mt-20 p-6">
      <div class="bg-white p-8 rounded-lg shadow-md text-center">
        <div class="mb-6">
          <svg class="mx-auto h-16 w-16 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"/>
          </svg>
        </div>
        <h1 class="text-2xl font-bold text-gray-800 mb-4">Authentication Required</h1>
        <p class="text-gray-600 mb-6">You need to log in to access your todo list.</p>
        <div class="space-y-3">
          <a href="/login-page" class="block w-full bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors">Go to Login</a>
          <a href="/hello" class="block w-full bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors">Go to Home</a>
        </div>
      </div>
    </div>
{{/inline}}
{{> baseLayout}}
`

handlebars errorAlert = `
<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4 mt-4" role="alert">
  <strong class="font-bold">{{> errorTitle}}:</strong>
  <span class="block sm:inline">{{> errorMessage}}</span>
  </div>
`

GET /todos
  |> auth: "required"
  |> result
    ok(200):
      |> jq: `. + { sqlParams: [.user.id] }`
      |> pg: `SELECT id, title, completed, created_at, updated_at FROM todos WHERE user_id = $1 ORDER BY created_at DESC`
      |> jq: `. + {
        todos: .data.rows | map(. + {id: (.id | tostring)}),
        pageTitle: "Todo List"
      }`
      |> handlebars: `
        {{#*inline "title"}}{{pageTitle}}{{/inline}}
        {{#*inline "pageTitle"}}{{pageTitle}} - {{user.login}}{{/inline}}
        {{#*inline "pageContent"}}
            <div class="bg-gray-50 p-6 rounded-lg mb-6">
              <h3 class="text-lg font-semibold mb-4">Add New Todo</h3>
              <div id="form-errors"></div>
              <form hx-post="/todos/add" hx-target="#form-response" hx-swap="innerHTML" hx-on::response-error="document.getElementById('form-response').innerHTML = event.detail.xhr.responseText" class="space-y-4">
                <div>
                  <label for="title" class="block text-sm font-medium text-gray-700 mb-1">Title * (3-30 characters)</label>
                  <input type="text" id="title" name="title" required class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                </div>
                <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors">Add Todo</button>
              </form>
              <div id="form-response"></div>
            </div>
            
            <ul id="todo-list" class="space-y-3">
              {{#each todos}}
                {{> todoItemPartial}}
              {{else}}
                <li class="text-center text-gray-500 italic py-10">
                  <p>No todos yet. Add your first todo above!</p>
                </li>
              {{/each}}
            </ul>
        {{/inline}}
        {{> authLayout}}
      `
    authError(401):
      |> handlebars: `{{>loginRequiredLayout}}`

POST /todos/add
  |> auth: "required"
  |> result
    ok(200):
      |> validate: `
        title: string(3..30)
      `
      |> jq: `. + { 
        sqlParams: [.body.title, false, .user.id]
      }`
      |> pg: `INSERT INTO todos (title, completed, user_id) VALUES ($1, $2, $3) RETURNING *`
      |> result
        ok(201):
          |> jq: `(.data.rows[0] | . + {id: (.id | tostring)})`
          |> handlebars: `
            <div hx-swap-oob="afterbegin:#todo-list">
              {{>todoItemPartial}}
            </div>
            <input type="text" id="title" name="title" required class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" value="" hx-swap-oob="true">
          `
        validationError(400):
          |> jq: `{
            error: "Validation failed",
            field: .errors[0].field,
            rule: .errors[0].rule,
            message: .errors[0].message
          }`
          |> handlebars: `
            {{#*inline "errorTitle"}}Validation Error{{/inline}}
            {{#*inline "errorMessage"}}{{message}}{{/inline}}
            {{> errorAlert}}
          `
    authError(401):
      |> handlebars: `
        {{<errorAlert}}
          {{$errorTitle}}Authentication Required{{/errorTitle}}
          {{$errorMessage}}Please log in to add todos.{{/errorMessage}}
        {{/errorAlert}}
      `

POST /todos/:id/toggle
  |> auth: "required"
  |> result
    ok(200):
      |> jq: `{ sqlParams: [.params.id, .user.id], todoId: .params.id }`
      |> pg: `SELECT * FROM todos WHERE id = $1 AND user_id = $2`
      |> jq: `{ 
        sqlParams: [(.data.rows[0].completed | not), .todoId],
        currentTodo: .data.rows[0]
      }`
      |> pg: `UPDATE todos SET completed = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2 RETURNING *`
      |> jq: `.data.rows[0]`
      |> handlebars: `{{> todoItemPartial}}`
    authError(401):
       |> handlebars: `
        {{#*inline "errorTitle"}}Authentication Required{{/inline}}
        {{#*inline "errorMessage"}}Please log in to modify todos.{{/inline}}
        {{> errorAlert}}
      `

DELETE /todos/:id
  |> auth: "required"
  |> result
    ok(200):
      |> jq: `{ sqlParams: [.params.id, .user.id] }`
      |> pg: `DELETE FROM todos WHERE id = $1 AND user_id = $2`
      |> handlebars: ``
    authError(401):
       |> handlebars: `
        {{#*inline "errorTitle"}}Authentication Required{{/inline}}
        {{#*inline "errorMessage"}}Please log in to delete todos.{{/inline}}
        {{> errorAlert}}
      `

handlebars todoItemPartial = `
  <li class="{{#if completed}}bg-green-50 border-l-4 border-green-400{{else}}bg-gray-50 border-l-4 border-blue-400{{/if}} p-4 rounded-lg flex justify-between items-start">
    <div class="flex-1">
      <div class="{{#if completed}}text-gray-500 line-through{{else}}text-gray-800 font-medium{{/if}}">{{title}}</div>
      <div class="text-sm text-gray-500 mt-1">Created: {{created_at}}</div>
    </div>
    <div class="flex space-x-2 ml-4">
      {{#if completed}}
        <button hx-post="/todos/{{id}}/toggle" hx-target="closest li" hx-swap="outerHTML" class="px-3 py-1 text-sm bg-gray-500 hover:bg-gray-600 text-white rounded transition-colors">Mark Incomplete</button>
      {{else}}
        <button hx-post="/todos/{{id}}/toggle" hx-target="closest li" hx-swap="outerHTML" class="px-3 py-1 text-sm bg-green-500 hover:bg-green-600 text-white rounded transition-colors">Mark Complete</button>
      {{/if}}
      <button hx-delete="/todos/{{id}}" hx-target="closest li" hx-swap="outerHTML" hx-confirm="Are you sure you want to delete this todo?" class="px-3 py-1 text-sm bg-red-500 hover:bg-red-600 text-white rounded transition-colors">Delete</button>
    </div>
  </li>
`

## Test routes for new resultName functionality

# Test explicit resultName functionality
GET /test/named-query/:id
  |> jq: `{ resultName: "userProfile" }`
  |> pg: `SELECT 1 as id, 'Test User' as name, 'test@example.com' as email`
  |> jq: `{ user: .data.userProfile }`

# Test multiple named results
GET /test/multiple/:id
  |> jq: `{ resultName: "userInfo" }`
  |> pg: `SELECT 1 as id, 'Test User' as name`
  |> jq: `{ resultName: "userTeams" }`
  |> pg: `SELECT 1 as id, 'Engineering' as name UNION SELECT 2 as id, 'Product' as name`
  |> jq: `{ 
      profile: .data.userInfo,
      teams: .data.userTeams
    }`

# Test auto-naming with variables (should now use variable name as result key)
pg getUserQuery = `SELECT 1 as id, 'Auto Named User' as name`
pg getTeamsQuery = `SELECT 1 as id, 'Auto Team' as name`

GET /test/auto-naming/:id
  |> pg: getUserQuery
  |> pg: getTeamsQuery
  |> jq: `{ 
      user: .data.getUserQuery,
      teams: .data.getTeamsQuery,
      hasUserData: (.data.getUserQuery != null),
      hasTeamsData: (.data.getTeamsQuery != null)
    }`

# Test that legacy behavior is preserved (no resultName, no variable)
GET /test/legacy/:id
  |> pg: `SELECT 1 as id, 'Legacy User' as name`

# Test Fetch Middleware

## Basic GET request
GET /test-fetch
  |> fetch: `https://api.github.com/zen`

## GET with fetchUrl override
GET /test-fetch-override
  |> jq: `{ fetchUrl: "https://api.github.com/zen" }`
  |> fetch: `https://example.com`

## POST with body
GET /test-fetch-post
  |> jq: `{
    fetchMethod: "POST",
    fetchBody: { name: "test", value: 123 },
    fetchHeaders: { "Content-Type": "application/json" }
  }`
  |> fetch: `https://api.github.com/zen`

## Named result
GET /test-fetch-named
  |> jq: `{ resultName: "apiCall" }`
  |> fetch: `https://api.github.com/zen`
  |> jq: `{ 
    response: .data.apiCall.response,
    status: .data.apiCall.status,
    success: (.data.apiCall.status == 200)
  }`

## Test error handling
GET /test-fetch-error
  |> fetch: `https://nonexistent-domain-12345.com`

## Test timeout (if httpbin is slow)
GET /test-fetch-timeout
  |> jq: `{ fetchTimeout: 1 }`
  |> fetch: `https://httpbin.org/delay/5`