config pg {
  host: $DB_HOST || "localhost"
  port: $DB_PORT || 5432
  database: $DB_NAME || "myapp"
  user: $DB_USER || "postgres"
  password: $DB_PASSWORD || "secret"
  ssl: true
}

GET /hello
  |> jq: `{ world: ":)"}`

GET /page/:id
  |> auth: "required"
  |> jq: `{ sqlParams: [.params.id | tostring] }`
  |> pg: `SELECT * FROM teams WHERE id = $1`
  |> jq: `{ team: .data.rows[0] }`

pg teamsQuery = `SELECT * FROM teams`

jq teamsQuery = `{
  teams: .data.rows | map(. + {id: (.id | tostring)})
}`

GET /teams
  |> pg: teamsQuery

GET /test
  |> jq: `.`

GET /test2
  |> lua: `return request`

GET /test3
  |> jq: `{message: "Hello World", status: "success"}`
  |> result
    ok(200):
      |> jq: `{
        success: true,
        data: .message,
        timestamp: now
      }`
    default(500):
      |> jq: `{
        error: "Something went wrong",
        timestamp: now
      }`

GET /test4
  |> jq: `{
    errors: [
      {
        type: "validationError",
        field: "email",
        message: "Email is required",
        code: "FIELD_REQUIRED"
      }
    ]
  }`
  |> result
    ok(200):
      |> jq: `{success: true}`
    validationError(400):
      |> jq: `{
        error: "Validation failed",
        field: .errors[0].field,
        message: .errors[0].message,
        code: .errors[0].code
      }`
    default(500):
      |> jq: `{error: "Internal server error"}`

GET /test5
  |> jq: `{
    errors: [
      {
        type: "authRequired",
        header: "Authorization",
        expected: "Bearer <token>",
        provided: null
      }
    ]
  }`
  |> result
    ok(200):
      |> jq: `{success: true, data: .result}`
    authRequired(401):
      |> jq: `{
        error: "Authentication required",
        header: .errors[0].header,
        expected: .errors[0].expected,
        provided: .errors[0].provided
      }`
    default(500):
      |> jq: `{error: "Internal server error"}`

GET /test6
  |> jq: `{
    errors: [
      {
        type: "unknownError",
        message: "This is a custom error type not handled explicitly"
      }
    ]
  }`
  |> result
    ok(200):
      |> jq: `{success: true}`
    validationError(400):
      |> jq: `{error: "Validation error"}`
    default(500):
      |> jq: `{
        error: "Unhandled error occurred",
        type: .errors[0].type,
        message: .errors[0].message
      }`

GET /test-sql-error
  |> jq: `{ sqlParams: [] }`
  |> pg: `SELECT * FROM nonexistent_table`
  |> result
    ok(200):
      |> jq: `{success: true, data: .data}`
    sqlError(500):
      |> jq: `{
        error: "Database error",
        sqlstate: .errors[0].sqlstate,
        message: .errors[0].message,
        query: .errors[0].query
      }`
    default(500):
      |> jq: `{error: "Internal server error"}`

POST /users
  |> jq: `{
    method: .method,
    name: .body.name,
    email: .body.email,
    action: "create"
  }`

PUT /users/:id
  |> jq: `{
    method: .method,
    id: (.params.id | tonumber),
    name: .body.name,
    email: .body.email,
    action: "update"
  }`

PATCH /users/:id
  |> jq: `{
    method: .method,
    id: (.params.id | tonumber),
    body: .body,
    action: "partial_update"
  }`

POST /test-body
  |> jq: `{
    method: .method,
    body: .body,
    hasBody: (.body != null)
  }`

PUT /test-body
  |> jq: `{
    method: .method,
    body: .body,
    hasBody: (.body != null)
  }`

PATCH /test-body
  |> jq: `{
    method: .method,
    body: .body,
    hasBody: (.body != null)
  }`

GET /todos
  |> jq: `{ sqlParams: [] }`
  |> pg: `SELECT id, title, completed, created_at, updated_at FROM todos ORDER BY created_at DESC`
  |> jq: `{
    todos: .data.rows | map(. + {id: (.id | tostring)}),
    pageTitle: "My Todo List"
  }`
  |> mustache: `
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>{{pageTitle}}</title>
      <script src="https://unpkg.com/htmx.org@1.9.10"></script>
      <script src="https://cdn.tailwindcss.com"></script>
    </head>
    <body class="bg-gray-100 font-sans">
      <div class="max-w-4xl mx-auto p-6">
        <div class="bg-white p-6 rounded-lg shadow-md">
          <h1 class="text-3xl font-bold text-gray-800 border-b-2 border-blue-500 pb-3 mb-6">{{pageTitle}}</h1>
          
          <div class="bg-gray-50 p-6 rounded-lg mb-6">
            <h3 class="text-lg font-semibold mb-4">Add New Todo</h3>
            <div id="form-errors"></div>
            <form hx-post="/todos/add" hx-target="#form-response" hx-swap="innerHTML" hx-on::response-error="document.getElementById('form-response').innerHTML = event.detail.xhr.responseText" class="space-y-4">
              <div>
                <label for="title" class="block text-sm font-medium text-gray-700 mb-1">Title * (3-30 characters)</label>
                <input type="text" id="title" name="title" required class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
              </div>
              <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors">Add Todo</button>
            </form>
            <div id="form-response"></div>
          </div>
          
          <ul id="todo-list" class="space-y-3">
            {{#todos}}
            {{>todoItemPartial}}
            {{/todos}}
            {{^todos}}
            <li class="text-center text-gray-500 italic py-10">
              <p>No todos yet. Add your first todo above!</p>
            </li>
            {{/todos}}
          </ul>
        </div>
      </div>
    </body>
    </html>
  `

POST /todos/add
  |> validate: `
    title: string(3..30)
  `
  |> jq: `{ 
    sqlParams: [.body.title, false, "1"]
  }`
  |> pg: `INSERT INTO todos (title, completed, user_id) VALUES ($1, $2, $3) RETURNING *`
  |> result
    ok(201):
      |> jq: `(.data.rows[0] | . + {id: (.id | tostring)})`
      |> mustache: `
        <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
          <strong class="font-bold">Success!</strong> Todo added successfully.
        </div>
        <div hx-swap-oob="afterbegin:#todo-list">
          {{>todoItemPartial}}
        </div>
        <input type="text" id="title" name="title" required class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" value="" hx-swap-oob="true">
      `
    validationError(400):
      |> jq: `{
        error: "Validation failed",
        field: .errors[0].field,
        rule: .errors[0].rule,
        message: .errors[0].message
      }`
      |> mustache: `
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
          <strong class="font-bold">Validation Error:</strong>
          <span class="block sm:inline">{{message}}</span>
        </div>
      `

POST /todos/:id/toggle
  |> jq: `{ sqlParams: [.params.id], todoId: .params.id }`
  |> pg: `SELECT * FROM todos WHERE id = $1`
  |> jq: `{ 
    sqlParams: [(.data.rows[0].completed | not), .todoId],
    currentTodo: .data.rows[0]
  }`
  |> pg: `UPDATE todos SET completed = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2 RETURNING *`
  |> jq: `(.data.rows[0] | . + {id: (.id | tostring)})`
  |> mustache: `{{>todoItemPartial}}`

DELETE /todos/:id
  |> jq: `{ sqlParams: [.params.id] }`
  |> pg: `DELETE FROM todos WHERE id = $1`
  |> mustache: ``

mustache todoItemPartial = `
  <li class="{{#completed}}bg-green-50 border-l-4 border-green-400{{/completed}}{{^completed}}bg-gray-50 border-l-4 border-blue-400{{/completed}} p-4 rounded-lg flex justify-between items-start">
    <div class="flex-1">
      <div class="{{#completed}}text-gray-500 line-through{{/completed}}{{^completed}}text-gray-800 font-medium{{/completed}}">{{title}}</div>
      <div class="text-sm text-gray-500 mt-1">Created: {{created_at}}</div>
    </div>
    <div class="flex space-x-2 ml-4">
      {{#completed}}
      <button hx-post="/todos/{{id}}/toggle" hx-target="closest li" hx-swap="outerHTML" class="px-3 py-1 text-sm bg-gray-500 hover:bg-gray-600 text-white rounded transition-colors">Mark Incomplete</button>
      {{/completed}}
      {{^completed}}
      <button hx-post="/todos/{{id}}/toggle" hx-target="closest li" hx-swap="outerHTML" class="px-3 py-1 text-sm bg-green-500 hover:bg-green-600 text-white rounded transition-colors">Mark Complete</button>
      {{/completed}}
      <button hx-delete="/todos/{{id}}" hx-target="closest li" hx-swap="outerHTML" hx-confirm="Are you sure you want to delete this todo?" class="px-3 py-1 text-sm bg-red-500 hover:bg-red-600 text-white rounded transition-colors">Delete</button>
    </div>
  </li>
`

GET /hello-mustache
  |> jq: `{ name: "World", message: "Hello from mustache!" }`
  |> mustache: `
    <html>
      <head>
        <title>{{message}}</title>
      </head>
      <body>
        <h1>{{message}}</h1>
        <p>Hello, {{name}}!</p>
      </body>
    </html>
  `

GET /mustache-error-test
  |> jq: `{ invalid: "data" }`
  |> mustache: `{{syntax_error`

mustache cardPartial = `
  <div class="card">
    <h3>{{title}}</h3>
    <p>{{description}}</p>
  </div>
`

mustache headerPartial = `
  <header>
    <h1>{{siteName}}</h1>
    <nav>{{>navPartial}}</nav>
  </header>
`

mustache navPartial = `
  <ul>
    <li><a href="/">Home</a></li>
    <li><a href="/about">About</a></li>
  </ul>
`

GET /test-partials
  |> jq: `{ 
    title: "Welcome", 
    description: "This is a test card",
    siteName: "My Website"
  }`
  |> mustache: `
    <html>
      <head>
        <title>{{siteName}}</title>
      </head>
      <body>
        {{>headerPartial}}
        <main>
          {{>cardPartial}}
        </main>
      </body>
    </html>
  `

GET /test-missing-partial
  |> jq: `{ title: "Test" }`
  |> mustache: `
    <html>
      <body>
        {{>nonexistentPartial}}
      </body>
    </html>
  `

GET /test-sql-error-mustache
  |> jq: `{ sqlParams: [] }`
  |> pg: `SELECT * FROM nonexistent_table`
  |> result
    ok(200):
      |> jq: `{success: true, data: .data}`
    sqlError(500):
      |> jq: `{
        error: "Database error",
        sqlstate: .errors[0].sqlstate,
        message: .errors[0].message,
        query: .errors[0].query
      }`
      |> mustache: `{{error}}`
    default(500):
      |> jq: `{error: "Internal server error"}`
      |> mustache: `{{error}}`
