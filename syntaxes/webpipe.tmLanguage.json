{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Web Pipe",
  "scopeName": "source.webpipe",
  "fileTypes": [
    "wp"
  ],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#route-definition"
    },
    {
      "include": "#variable-assignment"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.webpipe",
          "match": "#.*$"
        }
      ]
    },
    "route-definition": {
      "patterns": [
        {
          "begin": "^\\s*(GET|POST|PUT|PATCH|DELETE)\\s+([^\\s]+)",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.http-method.webpipe"
            },
            "2": {
              "name": "string.unquoted.route-path.webpipe",
              "patterns": [
                {
                  "match": ":[a-zA-Z_][a-zA-Z0-9_]*",
                  "name": "variable.parameter.route.webpipe"
                }
              ]
            }
          },
          "end": "^(?=\\S|$)",
          "patterns": [
            {
              "include": "#pipeline-steps"
            }
          ]
        }
      ]
    },
    "variable-assignment": {
      "patterns": [
        {
          "begin": "^\\s*(jq)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*=\\s*`",
          "beginCaptures": {
            "1": {
              "name": "storage.type.middleware.webpipe"
            },
            "2": {
              "name": "variable.other.assignment.webpipe"
            }
          },
          "end": "`",
          "name": "meta.variable-assignment.jq.webpipe",
          "contentName": "source.jq",
          "patterns": [
            {
              "include": "#jq-embedded"
            }
          ]
        },
        {
          "begin": "^\\s*(lua)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*=\\s*`",
          "beginCaptures": {
            "1": {
              "name": "storage.type.middleware.webpipe"
            },
            "2": {
              "name": "variable.other.assignment.webpipe"
            }
          },
          "end": "`",
          "name": "meta.variable-assignment.lua.webpipe",
          "contentName": "source.lua",
          "patterns": [
            {
              "include": "source.lua"
            }
          ]
        },
        {
          "begin": "^\\s*(pg)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*=\\s*`",
          "beginCaptures": {
            "1": {
              "name": "storage.type.middleware.webpipe"
            },
            "2": {
              "name": "variable.other.assignment.webpipe"
            }
          },
          "end": "`",
          "name": "meta.variable-assignment.sql.webpipe",
          "contentName": "source.sql",
          "patterns": [
            {
              "include": "#sql-string-override"
            },
            {
              "include": "source.sql"
            }
          ]
        },
        {
          "begin": "^\\s*(mustache)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*=\\s*`",
          "beginCaptures": {
            "1": {
              "name": "storage.type.middleware.webpipe"
            },
            "2": {
              "name": "variable.other.assignment.webpipe"
            }
          },
          "end": "`",
          "name": "meta.variable-assignment.mustache.webpipe",
          "contentName": "text.html.mustache",
          "patterns": [
            {
              "include": "#mustache-embedded"
            }
          ]
        },
        {
          "begin": "^\\s*(validate)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*=\\s*`",
          "beginCaptures": {
            "1": {
              "name": "storage.type.middleware.webpipe"
            },
            "2": {
              "name": "variable.other.assignment.webpipe"
            }
          },
          "end": "`",
          "name": "meta.variable-assignment.validate.webpipe",
          "contentName": "source.validate.webpipe",
          "patterns": [
            {
              "include": "#validate-embedded"
            }
          ]
        }
      ]
    },
    "pipeline-steps": {
      "patterns": [
        {
          "include": "#middleware-step"
        },
        {
          "include": "#result-step"
        },
        {
          "include": "#pipeline-operator"
        }
      ]
    },
    "pipeline-operator": {
      "match": "\\s*(\\|>)",
      "captures": {
        "1": {
          "name": "keyword.operator.pipe.webpipe"
        }
      }
    },
    "middleware-step": {
      "patterns": [
        {
          "begin": "\\s*(\\|>)\\s*(jq):\\s*`",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.pipe.webpipe"
            },
            "2": {
              "name": "entity.name.function.middleware.jq.webpipe"
            }
          },
          "end": "`",
          "name": "meta.embedded.jq.webpipe",
          "contentName": "source.jq",
          "patterns": [
            {
              "include": "#jq-embedded"
            }
          ]
        },
        {
          "begin": "\\s*(\\|>)\\s*(lua):\\s*`",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.pipe.webpipe"
            },
            "2": {
              "name": "entity.name.function.middleware.lua.webpipe"
            }
          },
          "end": "`",
          "name": "meta.embedded.lua.webpipe",
          "contentName": "source.lua",
          "patterns": [
            {
              "include": "source.lua"
            }
          ]
        },
        {
          "begin": "\\s*(\\|>)\\s*(pg):\\s*`",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.pipe.webpipe"
            },
            "2": {
              "name": "entity.name.function.middleware.pg.webpipe"
            }
          },
          "end": "`",
          "name": "meta.embedded.sql.webpipe",
          "contentName": "source.sql",
          "patterns": [
            {
              "include": "#sql-string-override"
            },
            {
              "include": "source.sql"
            }
          ]
        },
        {
          "begin": "\\s*(\\|>)\\s*(mustache):\\s*`",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.pipe.webpipe"
            },
            "2": {
              "name": "entity.name.function.middleware.mustache.webpipe"
            }
          },
          "end": "`",
          "name": "meta.embedded.mustache.webpipe",
          "contentName": "text.html.mustache",
          "patterns": [
            {
              "include": "#mustache-embedded"
            }
          ]
        },
        {
          "begin": "\\s*(\\|>)\\s*(validate):\\s*`",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.pipe.webpipe"
            },
            "2": {
              "name": "entity.name.function.middleware.validate.webpipe"
            }
          },
          "end": "`",
          "name": "meta.embedded.validate.webpipe",
          "contentName": "source.validate.webpipe",
          "patterns": [
            {
              "include": "#validate-embedded"
            }
          ]
        },
        {
          "match": "\\s*(\\|>)\\s*(jq|lua|pg|mustache|validate):\\s*([a-zA-Z_][a-zA-Z0-9_]*)(?!\\s*`)",
          "captures": {
            "1": {
              "name": "keyword.operator.pipe.webpipe"
            },
            "2": {
              "name": "entity.name.function.middleware.webpipe"
            },
            "3": {
              "name": "variable.other.webpipe"
            }
          }
        }
      ]
    },
    "result-step": {
      "begin": "\\s*(\\|>)\\s*(result)\\s*$",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.pipe.webpipe"
        },
        "2": {
          "name": "keyword.control.result.webpipe"
        }
      },
      "end": "^(?=\\S|$)",
      "patterns": [
        {
          "include": "#result-conditions"
        }
      ]
    },
    "result-conditions": {
      "patterns": [
        {
          "begin": "^\\s*([a-zA-Z]+)\\((\\d+)\\):",
          "beginCaptures": {
            "1": {
              "name": "entity.name.type.condition.webpipe"
            },
            "2": {
              "name": "constant.numeric.status-code.webpipe"
            }
          },
          "end": "^(?=\\s*[a-zA-Z]+\\(\\d+\\):|^\\S|$)",
          "patterns": [
            {
              "include": "#pipeline-steps"
            }
          ]
        }
      ]
    },
    "jq-embedded": {
      "patterns": [
        {
          "name": "string.quoted.double.jq",
          "begin": "\"",
          "end": "(\"|(?=`))",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.jq"
            }
          },
          "patterns": [
            {
              "name": "constant.character.escape.jq",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "variable.other.jq",
          "match": "\\.[a-zA-Z_][a-zA-Z0-9_]*|\\.[0-9]+"
        },
        {
          "name": "variable.parameter.jq",
          "match": "\\$[a-zA-Z_][a-zA-Z0-9_]*"
        },
        {
          "name": "keyword.operator.jq",
          "match": "\\||\\+|\\-|\\*|/|==|!=|<|>|<=|>=|and|or|not|\\?"
        },
        {
          "name": "support.function.jq",
          "match": "\\b(map|select|keys|values|length|tostring|tonumber|type|now|empty|error|debug|reverse|sort|group_by|unique|flatten|min|max|add|any|all|range|floor|ceil|round|sqrt|test|match|capture|split|join|ltrimstr|rtrimstr|startswith|endswith|inside|contains|index|rindex|tojson|fromjson|@\\w+)\\b"
        },
        {
          "name": "constant.language.jq",
          "match": "\\b(null|true|false)\\b"
        },
        {
          "name": "constant.numeric.jq",
          "match": "\\b[0-9]+\\.?[0-9]*\\b"
        },
        {
          "name": "meta.brackets.jq",
          "begin": "\\[",
          "end": "(\\]|(?=`))",
          "patterns": [
            {
              "include": "#jq-embedded"
            }
          ]
        },
        {
          "name": "meta.braces.jq",
          "begin": "\\{",
          "end": "(\\}|(?=`))",
          "patterns": [
            {
              "include": "#jq-embedded"
            }
          ]
        }
      ]
    },
    "mustache-embedded": {
      "patterns": [
        {
          "include": "text.html.basic"
        },
        {
          "name": "meta.tag.mustache.triple",
          "begin": "\\{\\{\\{",
          "end": "(\\}\\}\\}|(?=`))",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.tag.begin.mustache"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.tag.end.mustache"
            }
          },
          "contentName": "variable.other.mustache"
        },
        {
          "name": "meta.tag.mustache",
          "begin": "\\{\\{",
          "end": "(\\}\\}|(?=`))",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.tag.begin.mustache"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.tag.end.mustache"
            }
          },
          "patterns": [
            {
              "match": "^\\s*(#|\\^|/|>|&|!)",
              "name": "keyword.control.mustache"
            },
            {
              "match": "[a-zA-Z_][a-zA-Z0-9_]*",
              "name": "variable.other.mustache"
            }
          ]
        }
      ]
    },
    "sql-string-override": {
      "patterns": [
        {
          "name": "string.quoted.single.sql",
          "begin": "'",
          "end": "('|(?=`))",
          "patterns": [
            {
              "name": "constant.character.escape.sql",
              "match": "\\\\.|''"
            }
          ]
        },
        {
          "name": "string.quoted.double.sql",
          "begin": "\"",
          "end": "(\"|(?=`))",
          "patterns": [
            {
              "name": "constant.character.escape.sql",
              "match": "\\\\.\"|\"\"" 
            }
          ]
        }
      ]
    },
    "validate-embedded": {
      "patterns": [
        {
          "match": "^\\s*([a-zA-Z_][a-zA-Z0-9_]*)(\\?)?\\s*:\\s*(.+)$",
          "captures": {
            "1": {
              "name": "variable.parameter.field.validate"
            },
            "2": {
              "name": "keyword.operator.optional.validate"
            },
            "3": {
              "name": "meta.type.validate",
              "patterns": [
                {
                  "include": "#validate-types"
                }
              ]
            }
          }
        }
      ]
    },
    "validate-types": {
      "patterns": [
        {
          "match": "\\b(string|number|email|boolean)\\b",
          "name": "support.type.validate"
        },
        {
          "match": "\\(\\s*(\\d+)\\s*\\.\\.\\s*(\\d+)\\s*\\)",
          "captures": {
            "1": {
              "name": "constant.numeric.min.validate"
            },
            "2": {
              "name": "constant.numeric.max.validate"
            }
          }
        }
      ]
    },
    "embedded-content": {
      "patterns": [
        {
          "match": ".+",
          "name": "string.unquoted.embedded.webpipe"
        }
      ]
    }
  }
}
